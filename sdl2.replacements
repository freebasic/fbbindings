convert c: #define SDL_QuitRequested() (SDL_PumpEvents(), (SDL_PeepEvents(NULL, 0, SDL_PEEKEVENT, SDL_QUIT, SDL_QUIT) > 0))
to fb:
	private function SDL_QuitRequested() as SDL_bool
		SDL_PumpEvents()
		function = (SDL_PeepEvents(NULL, 0, SDL_PEEKEVENT, SDL_QUIT_, SDL_QUIT_) > 0)
	end function

# should use "-expandindefine SDL_static_cast", but fbfrog doesn't do it in this case
# because the macro call involves macro parameters
convert c:
	#define SDL_FOURCC(A, B, C, D) \
		((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \
		 (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \
		 (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \
		 (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))
to c:
	#define SDL_FOURCC(A, B, C, D) \
		((((Uint32)(Uint8)(A)) << 0) | \
		 (((Uint32)(Uint8)(B)) << 8) | \
		 (((Uint32)(Uint8)(C)) << 16) | \
		 (((Uint32)(Uint8)(D)) << 24))

convert c: #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( "int $3\n\t" )
to fb:     #define SDL_TriggerBreakpoint() asm int 3

convert c: #define SDL_disabled_assert(condition) do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION)
to fb:     #define SDL_disabled_assert(condition) scope : end scope

convert c:
	#define SDL_enabled_assert(condition) \
		do { \
			while ( !(condition) ) { \
				static struct SDL_AssertData sdl_assert_data = { \
					0, 0, #condition, 0, 0, 0, 0 \
				}; \
				const SDL_AssertState sdl_assert_state = SDL_ReportAssertion(&sdl_assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE); \
				if (sdl_assert_state == SDL_ASSERTION_RETRY) { \
					continue; /* go again. */ \
				} else if (sdl_assert_state == SDL_ASSERTION_BREAK) { \
					SDL_TriggerBreakpoint(); \
				} \
				break; /* not retrying. */ \
			} \
		} while (SDL_NULL_WHILE_LOOP_CONDITION)
to fb:
	#macro SDL_enabled_assert(condition)
		scope
			while (condition) = 0
				static as SDL_assert_data assert_data = ( 0, 0, @#condition, 0, 0, 0, 0 )
				dim as const SDL_assert_state state = SDL_ReportAssertion(@assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE)
				select case state
				case SDL_ASSERTION_RETRY
					continue while
				case SDL_ASSERTION_BREAK
					SDL_TriggerBreakpoint()
				end select
				exit while
			wend
		end scope
	#endmacro

convert c: #define SDL_FUNCTION __func__
to c:      #define SDL_FUNCTION __FUNCTION__

convert c: #define SDL_CompilerBarrier() __asm__ __volatile__ ("" : : : "memory")
to fb:     #define SDL_CompilerBarrier() asm nop

convert c: #define SDL_MemoryBarrierRelease() __asm__ __volatile__ ("dmb ish" : : : "memory")
to c:      #define SDL_MemoryBarrierRelease() SDL_CompilerBarrier()

convert c: #define SDL_MemoryBarrierAcquire() __asm__ __volatile__ ("dmb ish" : : : "memory")
to c:      #define SDL_MemoryBarrierAcquire() SDL_CompilerBarrier()

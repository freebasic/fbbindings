convert c: #define NULL ((void *)0)
to c:      #define NULL 0

convert c: #define NULL64 ((void *)0)
to c:      #define NULL64 0

convert c: #define __MINGW64_VERSION_STR __MINGW64_STRINGIFY(__MINGW64_VERSION_MAJOR) "." __MINGW64_STRINGIFY(__MINGW64_VERSION_MINOR)
to fb:     #define __MINGW64_VERSION_STR __MINGW64_STRINGIFY(__MINGW64_VERSION_MAJOR) "." __MINGW64_STRINGIFY(__MINGW64_VERSION_MINOR)

convert c: #define __MINGW_STRING_AW(str) L##str
to fb:     #define __MINGW_STRING_AW(str) wstr(str)
convert c: #define API_SET_STRING_U_Y(s) L##s
to fb:     #define API_SET_STRING_U_Y(s) wstr(s)
convert c: #define __TEXT(quote) L##quote
to fb:     #define __TEXT(quote) wstr(quote)
convert c: #define OLESTR(str) L##str
to fb:     #define OLESTR(str) wstr(str)

convert c:
	#define BCRYPT_INIT_AUTH_MODE_INFO(_AUTH_INFO_STRUCT_) \
		RtlZeroMemory((&_AUTH_INFO_STRUCT_), sizeof (BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO)); \
		(_AUTH_INFO_STRUCT_).cbSize = sizeof (BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO); \
		(_AUTH_INFO_STRUCT_).dwInfoVersion = BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION;
to c:
	#define BCRYPT_INIT_AUTH_MODE_INFO(_AUTH_INFO_STRUCT_) \
		{ \
			RtlZeroMemory((&_AUTH_INFO_STRUCT_), sizeof (BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO)); \
			(_AUTH_INFO_STRUCT_).cbSize = sizeof (BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO); \
			(_AUTH_INFO_STRUCT_).dwInfoVersion = BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION; \
		}

convert c: #define HANDLE_WM_NOTIFY(hwnd, wParam, lParam, fn) (fn)((hwnd),(int)(wParam),(NMHDR *)(lParam))
to c:      #define HANDLE_WM_NOTIFY(hwnd, wParam, lParam, fn) fn((hwnd),(int)(wParam),(NMHDR *)(lParam))

convert c: #define FORWARD_WM_NOTIFY(hwnd, idFrom, pnmhdr, fn) (LRESULT)(fn)((hwnd),WM_NOTIFY,(WPARAM)(int)(idFrom),(LPARAM)(NMHDR *)(pnmhdr))
to c:      #define FORWARD_WM_NOTIFY(hwnd, idFrom, pnmhdr, fn) (LRESULT)fn((hwnd),WM_NOTIFY,(WPARAM)(int)(idFrom),(LPARAM)(NMHDR *)(pnmhdr))

convert c:
	#define ListView_GetItemRect(hwnd, i, prc, code) \
		(WINBOOL)SNDMSG((hwnd), LVM_GETITEMRECT, (WPARAM)(int)(i), \
			((prc) ? \
				(((RECT *)(prc))->left = (code),(LPARAM)(RECT *)(prc)) : \
				(LPARAM)(RECT *)NULL))
to fb:
	private function ListView_GetItemRect(byval hwnd as HWND, byval i as long, byval prc as RECT ptr, byval code as long) as WINBOOL
		if prc then
			prc->left = code
		end if
		function = SNDMSG(hwnd, LVM_GETITEMRECT, cast(WPARAM, i), cast(LPARAM, prc))
	end function

convert c:
	#define ListView_GetSubItemRect(hwnd, iItem, iSubItem, code, prc) \
		(WINBOOL)SNDMSG((hwnd), LVM_GETSUBITEMRECT, (WPARAM)(int)(iItem), \
			((prc) ? \
				((((LPRECT)(prc))->top = iSubItem), \
				 (((LPRECT)(prc))->left = code), \
				 (LPARAM)(prc)) : \
				(LPARAM)(LPRECT)NULL))
to fb:
	private function ListView_GetSubItemRect(byval hwnd as HWND, byval iItem as long, byval iSubItem as long, byval code as long, byval prc as RECT ptr) as WINBOOL
		if prc then
			prc->top = iSubItem
			prc->left = code
		end if
		function = SNDMSG(hwnd, LVM_GETSUBITEMRECT, cast(WPARAM, iItem), cast(LPARAM, prc))
	end function

convert c:
	#define TreeView_GetItemRect(hwnd, hitem, prc, code) \
		(*(HTREEITEM *)prc = (hitem), \
		 (WINBOOL)SNDMSG((hwnd), TVM_GETITEMRECT, (WPARAM)(code), (LPARAM)(RECT *)(prc)))
to fb:
	private function TreeView_GetItemRect(byval hwnd as HWND, byval hitem as HTREEITEM, byval prc as RECT ptr, byval code as long) as WINBOOL
		*cptr(HTREEITEM ptr, prc) = hitem
		function = SNDMSG(hwnd, TVM_GETITEMRECT, cast(WPARAM, code), cast(LPARAM, prc))
	end function

convert c: #define DPA_FastDeleteLastPtr(hdpa) (--*(int *)(hdpa))
to fb:     #define DPA_FastDeleteLastPtr(hdpa) scope : *cptr(long ptr, (hdpa)) -= 1 : end scope

convert c: #define D3DSINCOSCONST1 -1.5500992e-006f, -2.1701389e-005f, 0.0026041667f, 0.00026041668f
to fb:     #define D3DSINCOSCONST1 -1.5500992e-006f, -2.1701389e-005f, 0.0026041667f, 0.00026041668f
convert c: #define D3DSINCOSCONST2 -0.020833334f, -0.12500000f, 1.0f, 0.50000000f
to fb:     #define D3DSINCOSCONST2 -0.020833334f, -0.12500000f, 1.0f, 0.50000000f

convert c: #define DISEQUENCE_COMPARE(dwSq1, cmp, dwSq2) ((int)((dwSq1) - (dwSq2)) cmp 0)
to fb:     #define DISEQUENCE_COMPARE(dwSq1, cmp, dwSq2) (clng((dwSq1) - (dwSq2)) cmp 0)

convert c: #define CAST_MIB_INFO(X, Y, Z) Z = (Y)(X->rgbyData)
to fb:     #define CAST_MIB_INFO(X, Y, Z) scope : Z = cast(Y, X->rgbyData) : end scope

convert c:
	#define INIT_MMREG_MID(guid, id) \
		{ \
			(guid)->Data1 = 0xd5a47fa7 + (USHORT)(id); \
			(guid)->Data2 = 0x6d98; \
			(guid)->Data3 = 0x11d1; \
			(guid)->Data4[0] = 0xa2; \
			(guid)->Data4[1] = 0x1a; \
			(guid)->Data4[2] = 0x00; \
			(guid)->Data4[3] = 0xa0; \
			(guid)->Data4[4] = 0xc9; \
			(guid)->Data4[5] = 0x22; \
			(guid)->Data4[6] = 0x31; \
			(guid)->Data4[7] = 0x96; \
		}
to fb:
	#macro INIT_MMREG_MID(guid, id)
		scope
			(guid)->Data1 = &hd5a47fa7 + cast(USHORT, id)
			(guid)->Data2 = &h6d98
			(guid)->Data3 = &h11d1
			(guid)->Data4(0) = &ha2
			(guid)->Data4(1) = &h1a
			(guid)->Data4(2) = &h00
			(guid)->Data4(3) = &ha0
			(guid)->Data4(4) = &hc9
			(guid)->Data4(5) = &h22
			(guid)->Data4(6) = &h31
			(guid)->Data4(7) = &h96
		end scope
	#endmacro

convert c: #define IS_COMPATIBLE_MMREG_MID(guid) (((((((((((((guid)->Data1 >= &hd5a47fa7) andalso ((guid)->Data1 < (&hd5a47fa7 + &hffff))) andalso ((guid)->Data2 = &h6d98)) andalso ((guid)->Data3 = &h11d1)) andalso ((guid)->Data4[0] = &ha2)) andalso ((guid)->Data4[1] = &h1a)) andalso ((guid)->Data4[2] = &h00)) andalso ((guid)->Data4[3] = &ha0)) andalso ((guid)->Data4[4] = &hc9)) andalso ((guid)->Data4[5] = &h22)) andalso ((guid)->Data4[6] = &h31)) andalso ((guid)->Data4[7] = &h96))
to fb:     #define IS_COMPATIBLE_MMREG_MID(guid) (((((((((((((guid)->Data1 >= &hd5a47fa7) andalso ((guid)->Data1 < (&hd5a47fa7 + &hffff))) andalso ((guid)->Data2 = &h6d98)) andalso ((guid)->Data3 = &h11d1)) andalso ((guid)->Data4(0) = &ha2)) andalso ((guid)->Data4(1) = &h1a)) andalso ((guid)->Data4(2) = &h00)) andalso ((guid)->Data4(3) = &ha0)) andalso ((guid)->Data4(4) = &hc9)) andalso ((guid)->Data4(5) = &h22)) andalso ((guid)->Data4(6) = &h31)) andalso ((guid)->Data4(7) = &h96))

convert c:
	#define INIT_MMREG_PID(guid, id) \
		{ \
			(guid)->Data1 = 0xe36dc2ac + (USHORT)(id); \
			(guid)->Data2 = 0x6d9a; \
			(guid)->Data3 = 0x11d1; \
			(guid)->Data4[0] = 0xa2; \
			(guid)->Data4[1] = 0x1a; \
			(guid)->Data4[2] = 0x00; \
			(guid)->Data4[3] = 0xa0; \
			(guid)->Data4[4] = 0xc9; \
			(guid)->Data4[5] = 0x22; \
			(guid)->Data4[6] = 0x31; \
			(guid)->Data4[7] = 0x96; \
		}
to fb:
	#macro INIT_MMREG_PID(guid, id)
		scope
			(guid)->Data1 = &he36dc2ac + cast(USHORT, id)
			(guid)->Data2 = &h6d9a
			(guid)->Data3 = &h11d1
			(guid)->Data4(0) = &ha2
			(guid)->Data4(1) = &h1a
			(guid)->Data4(2) = &h00
			(guid)->Data4(3) = &ha0
			(guid)->Data4(4) = &hc9
			(guid)->Data4(5) = &h22
			(guid)->Data4(6) = &h31
			(guid)->Data4(7) = &h96
		end scope
	#endmacro

convert c: #define IS_COMPATIBLE_MMREG_PID(guid) (((((((((((((guid)->Data1 >= &he36dc2ac) andalso ((guid)->Data1 < (&he36dc2ac + &hffff))) andalso ((guid)->Data2 = &h6d9a)) andalso ((guid)->Data3 = &h11d1)) andalso ((guid)->Data4[0] = &ha2)) andalso ((guid)->Data4[1] = &h1a)) andalso ((guid)->Data4[2] = &h00)) andalso ((guid)->Data4[3] = &ha0)) andalso ((guid)->Data4[4] = &hc9)) andalso ((guid)->Data4[5] = &h22)) andalso ((guid)->Data4[6] = &h31)) andalso ((guid)->Data4[7] = &h96))
to fb:     #define IS_COMPATIBLE_MMREG_PID(guid) (((((((((((((guid)->Data1 >= &he36dc2ac) andalso ((guid)->Data1 < (&he36dc2ac + &hffff))) andalso ((guid)->Data2 = &h6d9a)) andalso ((guid)->Data3 = &h11d1)) andalso ((guid)->Data4(0) = &ha2)) andalso ((guid)->Data4(1) = &h1a)) andalso ((guid)->Data4(2) = &h00)) andalso ((guid)->Data4(3) = &ha0)) andalso ((guid)->Data4(4) = &hc9)) andalso ((guid)->Data4(5) = &h22)) andalso ((guid)->Data4(6) = &h31)) andalso ((guid)->Data4(7) = &h96))

convert c:
	#define KsecInitializeListEntry(Entry, SigValue) \
		((PKSEC_LIST_ENTRY) Entry)->List.Flink = ((PKSEC_LIST_ENTRY) Entry)->List.Blink = NULL; \
		((PKSEC_LIST_ENTRY) Entry)->RefCount = 1; \
		((PKSEC_LIST_ENTRY) Entry)->Signature = SigValue; \
		((PKSEC_LIST_ENTRY) Entry)->OwningList = NULL; \
		((PKSEC_LIST_ENTRY) Entry)->Reserved = NULL;
to fb:
	#macro KsecInitializeListEntry(Entry, SigValue)
		cast(PKSEC_LIST_ENTRY, Entry)->List.Flink = NULL
		cast(PKSEC_LIST_ENTRY, Entry)->List.Blink = NULL
		cast(PKSEC_LIST_ENTRY, Entry)->RefCount = 1
		cast(PKSEC_LIST_ENTRY, Entry)->Signature = SigValue
		cast(PKSEC_LIST_ENTRY, Entry)->OwningList = NULL
		cast(PKSEC_LIST_ENTRY, Entry)->Reserved = NULL
	#endmacro

convert c: #define FONTSIZE(n) { n##0000,0 }
to fb:     #define FONTSIZE_(n) (n##0000, 0)

convert c: #define byte_from_ndr(source,target) { *(target) = *(*(char **)&(source)->Buffer)++; }
to fb:
	#macro byte_from_ndr(source, target)
		scope
			*(target) = **cptr(byte ptr ptr, @(source)->Buffer)
			*cptr(byte ptr ptr, @(source)->Buffer) += 1
		end scope
	#endmacro

convert c: #define boolean_from_ndr(source,target) { *(target) = *(*(char **)&(source)->Buffer)++; }
to c:      #define boolean_from_ndr(source,target) byte_from_ndr(source, target)

convert c: #define boolean_array_from_ndr(Source,LowerIndex,UpperIndex,Target) { NDRcopy ((((char *)(Target))+(LowerIndex)),(Source)->Buffer,(unsigned int)((UpperIndex)-(LowerIndex))); *(unsigned long *)&(Source)->Buffer += ((UpperIndex)-(LowerIndex)); }
to c:      #define boolean_array_from_ndr(Source,LowerIndex,UpperIndex,Target) byte_array_from_ndr(Source, LowerIndex, UpperIndex, Target)

convert c: #define small_from_ndr(source,target) { *(target) = *(*(char **)&(source)->Buffer)++; }
to c:      #define small_from_ndr(source,target) byte_from_ndr(source, target)

convert c: #define small_from_ndr_temp(source,target,format) { *(target) = *(*(char **)(source))++; }
to fb:
	#macro small_from_ndr_temp(source, target, format)
		scope
			*(target) = **cptr(byte ptr ptr, source)
			*cptr(byte ptr ptr, source) += 1
		end scope
	#endmacro

convert c:
	#define small_array_from_ndr(Source,LowerIndex,UpperIndex,Target) { \
		NDRcopy ((((char *)(Target))+(LowerIndex)),(Source)->Buffer,(unsigned int)((UpperIndex)-(LowerIndex))); \
		*(unsigned long *)&(Source)->Buffer += ((UpperIndex)-(LowerIndex)); \
	}
to c: #define small_array_from_ndr(Source, LowerIndex, UpperIndex, Target) byte_array_from_ndr(Source, LowerIndex, UpperIndex, Target)

convert c:
	#define SecInvalidateHandle(x) \
		((PSecHandle) x)->dwLower = ((ULONG_PTR) ((INT_PTR)-1)); \
		((PSecHandle) x)->dwUpper = ((ULONG_PTR) ((INT_PTR)-1));
to c:
	#define SecInvalidateHandle(x) { \
		((PSecHandle) x)->dwLower = ((ULONG_PTR) ((INT_PTR)-1)); \
		((PSecHandle) x)->dwUpper = ((ULONG_PTR) ((INT_PTR)-1)); \
	}

convert c:
	#define ICGetDefaultQuality(hic) \
		(ICSendMessage(hic,ICM_GETDEFAULTQUALITY,(DWORD_PTR)(LPVOID)&dwICValue,sizeof(DWORD)), \
		 dwICValue)
to fb:
	private function ICGetDefaultQuality(byval hic as HIC) as DWORD
		ICSendMessage(hic, ICM_GETDEFAULTQUALITY, cast(DWORD_PTR, cast(LPVOID, @dwICValue)), sizeof(DWORD))
		function = dwICValue
	end function

convert c:
	#define ICGetDefaultKeyFrameRate(hic) \
		(ICSendMessage(hic,ICM_GETDEFAULTKEYFRAMERATE,(DWORD_PTR)(LPVOID)&dwICValue,sizeof(DWORD)), \
		 dwICValue)
to fb:
	private function ICGetDefaultKeyFrameRate(byval hic as HIC) as DWORD
		ICSendMessage(hic, ICM_GETDEFAULTKEYFRAMERATE, cast(DWORD_PTR, cast(LPVOID, @dwICValue)), sizeof(DWORD))
		function = dwICValue
	end function

convert c: #define MCIWndGetActiveTimer(hwnd) (UINT)MCIWndSM(hwnd,MCIWNDM_GETACTIVETIMER,(WPARAM)0,(LPARAM)0);
to c:      #define MCIWndGetActiveTimer(hwnd) (UINT)MCIWndSM(hwnd,MCIWNDM_GETACTIVETIMER,(WPARAM)0,(LPARAM)0)

convert c: #define MCIWndGetInactiveTimer(hwnd) (UINT)MCIWndSM(hwnd,MCIWNDM_GETINACTIVETIMER,(WPARAM)0,(LPARAM)0);
to c:      #define MCIWndGetInactiveTimer(hwnd) (UINT)MCIWndSM(hwnd,MCIWNDM_GETINACTIVETIMER,(WPARAM)0,(LPARAM)0)

convert c: #define MCIWndPlayFromTo(hwnd, lStart, lEnd) (MCIWndSeek(hwnd,lStart), MCIWndPlayTo(hwnd,lEnd))
to fb:
	private function MCIWndPlayFromTo(byval hwnd as HWND, byval lStart as long, byval lEnd as long) as LONG
		MCIWndSeek(hwnd, lStart)
		function = MCIWndPlayTo(hwnd, lEnd)
	end function

convert c:
	#define FILTER_HRESULT_FROM_FLT_NTSTATUS(x) \
		(NT_ASSERT((x & 0xfff0000) == 0x001c0000), \
		 (HRESULT) (((x) & 0x8000ffff) | (FACILITY_USERMODE_FILTER_MANAGER << 16)))
to c:
	#define FILTER_HRESULT_FROM_FLT_NTSTATUS(x) \
		(HRESULT) (((x) & 0x8000ffff) | (FACILITY_USERMODE_FILTER_MANAGER << 16))

convert c:
	#define FD_CLR(fd, set) \
		do { \
			u_int __i; \
			for (__i = 0; __i < ((fd_set *)(set))->fd_count; __i++) { \
				if (((fd_set *)(set))->fd_array[__i] == fd) { \
					while (__i < ((fd_set *)(set))->fd_count - 1) { \
						((fd_set *)(set))->fd_array[__i] = ((fd_set *)(set))->fd_array[__i + 1]; \
						__i++; \
					} \
					((fd_set *)(set))->fd_count--; \
					break; \
				} \
			} \
		} while(0)
to fb:
	#macro FD_CLR(fd, set)
		scope
			dim __i as u_int
			while __i < cptr(fd_set ptr, set)->fd_count
				if cptr(fd_set ptr, set)->fd_array(__i) = fd then
					while __i < cptr(fd_set ptr, set)->fd_count - 1
						cptr(fd_set ptr, set)->fd_array(__i) = cptr(fd_set ptr, set)->fd_array(__i + 1)
						__i += 1
					wend
					cptr(fd_set ptr, set)->fd_count -= 1
					exit while
				end if
				__i += 1
			wend
		end scope
	#endmacro

convert c:
	#define FD_SET(fd, set) \
		do { \
			if (((fd_set *)(set))->fd_count < FD_SETSIZE) \
				((fd_set *)(set))->fd_array[((fd_set *)(set))->fd_count++] = (fd); \
		} while(0)
to fb:
	#macro FD_SET_(fd, set)
		scope
			if cptr(fd_set ptr, set)->fd_count < FD_SETSIZE then
				cptr(fd_set ptr, set)->fd_array(cptr(fd_set ptr, set)->fd_count) = (fd)
				cptr(fd_set ptr, set)->fd_count += 1
			end if
		end scope
	#endmacro

convert c:
	#define FD_CLR(fd, set) \
		do { \
			u_int __i; \
			for (__i = 0; __i < ((fd_set *)(set))->fd_count; __i++) { \
				if (((fd_set *)(set))->fd_array[__i] == fd) { \
					while (__i < ((fd_set *)(set))->fd_count - 1) { \
						((fd_set *)(set))->fd_array[__i] = ((fd_set *)(set))->fd_array[__i + 1]; \
						__i++; \
					} \
					((fd_set *)(set))->fd_count--; \
					break; \
				} \
			} \
		} while(0)
to fb:
	#macro FD_CLR(fd, set)
		scope
			dim __i as u_int
			while __i < cptr(fd_set ptr, set)->fd_count
				if cptr(fd_set ptr, set)->fd_array(__i) = fd then
					while __i < cptr(fd_set ptr, set)->fd_count - 1
						cptr(fd_set ptr, set)->fd_array(__i) = cptr(fd_set ptr, set)->fd_array(__i + 1)
						__i += 1
					wend
					cptr(fd_set ptr, set)->fd_count -= 1
					exit while
				end if
				__i += 1
			wend
		end scope
	#endmacro

convert c:
	#define FD_SET(fd, set) \
		do { \
			u_int __i; \
			for (__i = 0; __i < ((fd_set *)(set))->fd_count; __i++) { \
				if (((fd_set *)(set))->fd_array[__i] == (fd)) { \
					break; \
				} \
			} \
			if (__i == ((fd_set *)(set))->fd_count) { \
				if (((fd_set *)(set))->fd_count < FD_SETSIZE) { \
					((fd_set *)(set))->fd_array[__i] = (fd); \
					((fd_set *)(set))->fd_count++; \
				} \
			} \
		} while(0)
to fb:
	#macro FD_SET_(fd, set)
		scope
			dim __i as u_int
			while __i < cptr(fd_set ptr, set)->fd_count
				if cptr(fd_set ptr, set)->fd_array(__i) = (fd) then
					exit while
				end if
				__i += 1
			wend
			if __i = cptr(fd_set ptr, set)->fd_count then
				if cptr(fd_set ptr, set)->fd_count < FD_SETSIZE then
					cptr(fd_set ptr, set)->fd_array(__i) = (fd)
					cptr(fd_set ptr, set)->fd_count += 1
				end if
			end if
		end scope
	#endmacro

convert c: #define NUMELMS(array) (sizeof(array) / sizeof((array)[0]))
to fb:     #define NUMELMS(array) (ubound(array) - lbound(array) + 1)

convert c: #define DEFINE_SIZEOF(Array) (sizeof(Array) / sizeof((Array)[0]))
to fb:     #define DEFINE_SIZEOF(Array) (ubound(Array) - lbound(Array) + 1)

convert c: #define RTL_NUMBER_OF_V1(A) (sizeof(A) / sizeof((A)[0]))
to fb:     #define RTL_NUMBER_OF_V1(A) (ubound(A) - lbound(A) + 1)

convert c:
	#define ListView_GetGroupRect(hwnd, iGroupId, type, prc) \
		SNDMSG( \
			(hwnd), \
			LVM_GETGROUPRECT, \
			(WPARAM) (iGroupId), \
			((prc) ? (((RECT *) (prc))->top = (type)),(LPARAM) (RECT *) (prc) : (LPARAM) (RECT *)NULL) \
		)
to fb:
	private function ListView_GetGroupRect(byval hwnd as HWND, byval iGroupId as long, byval type_ as LONG, byval prc as RECT ptr) as BOOL
		if prc then
			prc->top = type_
		end if
		function = SNDMSG(hwnd, LVM_GETGROUPRECT, cast(WPARAM, iGroupId), cast(LPARAM, prc))
	end function

convert c:
	#define ListView_SetGroupState(hwnd, dwGroupId, dwMask, dwState) \
		{ \
			LVGROUP _macro_lvg; \
			_macro_lvg.cbSize = sizeof(_macro_lvg); \
			_macro_lvg.mask = LVGF_STATE; \
			_macro_lvg.stateMask = dwMask; \
			_macro_lvg.state = dwState; \
			SNDMSG((hwnd), LVM_SETGROUPINFO, (WPARAM)(dwGroupId), (LPARAM)(LVGROUP *)&_macro_lvg); \
		}
to fb:
	private function ListView_SetGroupState(byval hwnd as HWND, byval dwGroupId as UINT, byval dwMask as UINT, byval dwState as UINT) as LRESULT
		dim as LVGROUP _macro_lvg
		_macro_lvg.cbSize = sizeof(_macro_lvg)
		_macro_lvg.mask = LVGF_STATE
		_macro_lvg.stateMask = dwMask
		_macro_lvg.state = dwState
		function = SNDMSG(hwnd, LVM_SETGROUPINFO, cast(WPARAM, dwGroupId), cast(LPARAM, @_macro_lvg))
	end function

convert c:
	#define ListView_GetItemIndexRect(hwnd, plvii, iSubItem, code, prc) \
		(WINBOOL)SNDMSG((hwnd), LVM_GETITEMINDEXRECT, (WPARAM) (LVITEMINDEX *) (plvii), \
			((prc) ? ((((LPRECT) (prc))->top = (iSubItem)), \
			          (((LPRECT) (prc))->left = (code)), \
			          (LPARAM) (prc)) : \
			         (LPARAM) (LPRECT)NULL))
to fb:
	private function ListView_GetItemIndexRect(byval hwnd as HWND, byval plvii as LVITEMINDEX ptr, byval iSubItem as long, byval code as long, byval prc as LPRECT) as WINBOOL
		if prc then
			prc->top = iSubItem
			prc->left = code
		end if
		function = SNDMSG(hwnd, LVM_GETITEMINDEXRECT, cast(WPARAM, plvii), cast(LPARAM, prc))
	end function

convert c:
	#define ListView_SetItemIndexState(hwndLV, plvii, data, mask) \
		{ \
			LV_ITEM _macro_lvi; \
			_macro_lvi.stateMask = (mask); \
			_macro_lvi.state = (data); \
			SNDMSG((hwndLV), LVM_SETITEMINDEXSTATE, (WPARAM)(LVITEMINDEX *)(plvii), (LPARAM)(LV_ITEM *)&_macro_lvi); \
		}
to fb:
	private function ListView_SetItemIndexState(byval hwndLV as HWND, byval plvii as LVITEMINDEX ptr, byval data_ as UINT, byval mask as UINT) as HRESULT
		dim as LV_ITEM _macro_lvi
		_macro_lvi.stateMask = mask
		_macro_lvi.state = data_
		function = SNDMSG(hwndLV, LVM_SETITEMINDEXSTATE, cast(WPARAM, plvii), cast(LPARAM, @_macro_lvi))
	end function

convert c:
	#define TreeView_GetItemPartRect(hwnd, hitem, prc, partid) \
		{ \
			TVGETITEMPARTRECTINFO info; \
			info.hti = (hitem); \
			info.prc = (prc); \
			info.partID = (partid); \
			(WINBOOL)SNDMSG((hwnd), TVM_GETITEMPARTRECT, 0,(LPARAM) &info); \
		}
to fb:
	private function TreeView_GetItemPartRect(byval hwnd as HWND, byval hitem as HTREEITEM, byval prc as RECT ptr, byval partid as TVITEMPART) as WINBOOL
		dim as TVGETITEMPARTRECTINFO info
		info.hti = hitem
		info.prc = prc
		info.partID = partid
		function = SNDMSG(hwnd, TVM_GETITEMPARTRECT, 0, cast(LPARAM, @info))
	end function

# https://sourceforge.net/p/mingw-w64/bugs/474/
convert c: #define WAVE_FORMAT_POLYCOM G729_A 0xa114
to c:      #define WAVE_FORMAT_POLYCOM_G729_A 0xa114
#                                     ^

# https://sourceforge.net/p/mingw-w64/bugs/475/
convert c: #define LIS_ENABLED 0x2#define LIS_VISITED 0x4
to fb:
	const LIS_ENABLED = &h2
	const LIS_VISITED = &h4

convert c: #define STATIC_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX 0x00000000l, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71
to fb:     #define STATIC_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX &h00000000l, &h0000, &h0010, &h80, &h00, &h00, &haa, &h00, &h38, &h9b, &h71

convert c: #define REGSTR_PATH_RUN_POLICY REGSTR_PATH_POLICIES __TEXT("\\Explorer\\Run")
to fb:     #define REGSTR_PATH_RUN_POLICY (REGSTR_PATH_POLICIES + __TEXT(!"\\Explorer\\Run"))

convert c: #define __CRYPT32WTEXT(quote) L##quote
to fb:     #define __CRYPT32WTEXT(quote) wstr(quote)

convert c: #define szOID_CERT_PROP_ID(PropId) szOID_CERT_PROP_ID_PREFIX _szPROP_ID (PropId)
to fb:     #define szOID_CERT_PROP_ID(PropId) szOID_CERT_PROP_ID_PREFIX _szPROP_ID(PropId)

convert c: #define wszOID_CERT_PROP_ID(PropId) _CRYPT32WTEXT (szOID_CERT_PROP_ID_PREFIX) _CRYPT32WTEXT (_szPROP_ID (PropId))
to fb:     #define wszOID_CERT_PROP_ID(PropId) (_CRYPT32WTEXT(szOID_CERT_PROP_ID_PREFIX) + _CRYPT32WTEXT(_szPROP_ID(PropId)))

convert c: #define SDLCALL
to fb:     #define SDLCALL cdecl

convert c: #define NULL ((void *)0)
to c:      #define NULL 0

convert c:
	#define SDL_memset4(dst, val, len)				\
	do {								\
		int u0, u1, u2;						\
		__asm__ __volatile__ (					\
			"cld\n\t"					\
			"rep ; stosl\n\t"				\
			: "=&D" (u0), "=&a" (u1), "=&c" (u2)		\
			: "0" (dst), "1" (val), "2" (SDL_static_cast(Uint32, len))	\
			: "memory" );					\
	} while(0)
to c: #define SDL_memset4(dst, val, len) SDL_memset((dst), (val), (len) * 4)

convert c:
	#define SDL_memset4(dst, val, len)		\
	do {						\
		unsigned _count = (len);		\
		unsigned _n = (_count + 3) / 4;		\
		Uint32 *_p = SDL_static_cast(Uint32 *, dst);	\
		Uint32 _val = (val);			\
		if (len == 0) break;			\
		switch (_count % 4) {			\
		case 0: do {    *_p++ = _val;		\
		case 3:         *_p++ = _val;		\
		case 2:         *_p++ = _val;		\
		case 1:         *_p++ = _val;		\
			} while ( --_n );		\
		}					\
	} while(0)
to c: #define SDL_memset4(dst, val, len) SDL_memset((dst), (val), (len) * 4)

convert c:
	__attribute__((always_inline)) static __inline__ void SDL_memset4(void *dst, Uint32 val, size_t dwords) {
		int u0, u1, u2;
		__asm__ __volatile__ (
			"cld \n\t"
			"rep ; stosl \n\t"
			: "=&D" (u0), "=&a" (u1), "=&c" (u2)
			: "0" (dst), "1" (val), "2" (((Uint32)(dwords)))
			: "memory"
		);
	}
to fb: #define SDL_memset4(dst, val, dwords) SDL_memset((dst), (val), (dwords) * 4)

convert c:
	__attribute__((always_inline)) static __inline__ void SDL_memset4(void *dst, Uint32 val, size_t dwords) {
		size_t _n = (dwords + 3) / 4;
		Uint32 *_p = ((Uint32 *)(dst));
		Uint32 _val = (val);
		if (dwords == 0)
			return;
		switch (dwords % 4) {
			case 0: do {    *_p++ = _val;
			case 3:         *_p++ = _val;
			case 2:         *_p++ = _val;
			case 1:         *_p++ = _val;
			} while ( --_n );
		}
	}
to fb: #define SDL_memset4(dst, val, dwords) SDL_memset((dst), (val), (dwords) * 4)

convert c:
	#define SDL_memcpy(dst, src, len)					  \
	do {									  \
		int u0, u1, u2;						  	  \
		__asm__ __volatile__ (						  \
			"cld\n\t"						  \
			"rep ; movsl\n\t"					  \
			"testb $2,%b4\n\t"					  \
			"je 1f\n\t"						  \
			"movsw\n"						  \
			"1:\ttestb $1,%b4\n\t"					  \
			"je 2f\n\t"						  \
			"movsb\n"						  \
			"2:"							  \
			: "=&c" (u0), "=&D" (u1), "=&S" (u2)			  \
			: "0" (SDL_static_cast(unsigned, len)/4), "q" (len), "1" (dst),"2" (src) \
			: "memory" );						  \
	} while(0)
to c: #define SDL_memcpy(dst, src, len) memcpy((dst), (src), (len))

convert c: #define SDL_memcpy memcpy
to c:      #define SDL_memcpy(dst, src, len) memcpy((dst), (src), (len))

convert c: #define SDL_memcpy(dst, src, len) memcpy(dst, src, len)
to c:      #define SDL_memcpy(dst, src, len) memcpy((dst), (src), (len))

convert c:
	#define SDL_memcpy4(dst, src, len)				\
	do {								\
		int ecx, edi, esi;					\
		__asm__ __volatile__ (					\
			"cld\n\t"					\
			"rep ; movsl"					\
			: "=&c" (ecx), "=&D" (edi), "=&S" (esi)		\
			: "0" (SDL_static_cast(unsigned, len)), "1" (dst), "2" (src)	\
			: "memory" );					\
	} while(0)
to c: #define SDL_memcpy4(dst, src, len) SDL_memcpy((dst), (src), (len) * 4)

convert c: #define SDL_memcpy4(dst, src, len) memcpy(dst, src, (len) * 4)
to c:      #define SDL_memcpy4(dst, src, len) SDL_memcpy((dst), (src), (len) * 4)

convert c: #define SDL_memcpy4(dst, src, len) SDL_memcpy(dst, src, (len) << 2)
to c:      #define SDL_memcpy4(dst, src, len) SDL_memcpy((dst), (src), (len) * 4)

convert c:
	__attribute__((always_inline)) static __inline__ void *SDL_memcpy4(void *dst, const void *src, size_t dwords) {
		return SDL_memcpy(dst, src, dwords * 4);
	}
to c: #define SDL_memcpy4(dst, src, dwords) SDL_memcpy((dst), (src), (dwords) * 4)

convert c:
	#define SDL_revcpy(dst, src, len)			\
	do {							\
		int u0, u1, u2;					\
		char *dstp = SDL_static_cast(char *, dst);	\
		char *srcp = SDL_static_cast(char *, src);	\
		int n = (len);					\
		if ( n >= 4 ) {					\
		__asm__ __volatile__ (				\
			"std\n\t"				\
			"rep ; movsl\n\t"			\
			"cld\n\t"				\
			: "=&c" (u0), "=&D" (u1), "=&S" (u2)	\
			: "0" (n >> 2),				\
			  "1" (dstp+(n-4)), "2" (srcp+(n-4))	\
			: "memory" );				\
		}						\
		switch (n & 3) {				\
			case 3: dstp[2] = srcp[2];		\
			case 2: dstp[1] = srcp[1];		\
			case 1: dstp[0] = srcp[0];		\
				break;				\
			default:				\
				break;				\
		}						\
	} while(0)
to fb:
	private function SDL_revcpy(byval dst as any ptr, byval src as const any ptr, byval length as uinteger) as any ptr
		dim as const byte ptr s = src
		dim as byte ptr d = dst
		for i as integer = length - 1 to 0 step -1
			d[i] = s[i]
		next
		function = dst
	end function

convert c:
	static __inline__ Uint16 SDL_Swap16(Uint16 x)
	{
		__asm__("xchgb %b0,%h0" : "=q" (x) :  "0" (x));
		return x;
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))

convert c:
	static __inline__ Uint16 SDL_Swap16(Uint16 x)
	{
		__asm__("xchgb %b0,%h0" : "=Q" (x) :  "0" (x));
		return x;
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))

convert c:
	static __inline__ Uint16 SDL_Swap16(Uint16 x) {
		return ((Uint16)(((x<<8)|(x>>8))));
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))

convert c:
	__attribute__((always_inline)) static __inline__ Uint16 SDL_Swap16(Uint16 x) {
		__asm__("xchgb %b0,%h0": "=q"(x):"0"(x));
		return x;
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))

convert c:
	__attribute__((always_inline)) static __inline__ Uint16 SDL_Swap16(Uint16 x) {
		__asm__("xchgb %b0,%h0": "=Q"(x):"0"(x));
		return x;
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))

convert c:
	__attribute__((always_inline)) static __inline__ Uint16 SDL_Swap16(Uint16 x) {
		return ((Uint16)(((x << 8) | (x >> 8))));
	}
to fb: #define SDL_Swap16(x) cushort((cushort(x) shl 8) or (cushort(x) shr 8))


convert c:
	static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		__asm__("bswap %0" : "=r" (x) : "0" (x));
		return x;
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		__asm__("bswapl %0" : "=r" (x) : "0" (x));
		return x;
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		return ((Uint32)(((x<<24)|((x<<8)&0x00FF0000)|((x>>8)&0x0000FF00)|(x>>24))));
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	__attribute__((always_inline)) static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		__asm__("bswap %0": "=r"(x):"0"(x));
		return x;
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	__attribute__((always_inline)) static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		__asm__("bswapl %0": "=r"(x):"0"(x));
		return x;
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	__attribute__((always_inline)) static __inline__ Uint32 SDL_Swap32(Uint32 x) {
		return ((Uint32)(((x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24))));
	}
to fb:
	#define SDL_Swap32(x) _
		culng((culng(x) shl 24) or _
		      ((culng(x) shl 8) and &h00FF0000) or _
		      ((culng(x) shr 8) and &h0000FF00) or _
		      (culng(x) shr 24))

convert c:
	static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		union {
			struct { Uint32 a,b; } s;
			Uint64 u;
		} v;
		v.u = x;
		__asm__("bswapl %0 ; bswapl %1 ; xchgl %0,%1"
			: "=r" (v.s.a), "=r" (v.s.b)
			: "0" (v.s.a), "1" (v.s.b));
		return v.u;
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

convert c:
	static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		__asm__("bswapq %0" : "=r" (x) : "0" (x));
		return x;
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

convert c:
	static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		Uint32 hi, lo;
		/* Separate into high and low 32-bit values and swap them */
		lo = ((Uint32)(x & 0xFFFFFFFF));
		x >>= 32;
		hi = ((Uint32)(x & 0xFFFFFFFF));
		x = SDL_Swap32(lo);
		x <<= 32;
		x |= SDL_Swap32(hi);
		return (x);
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

convert c:
	__attribute__((always_inline)) static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		union {
			struct {
				Uint32 a, b;
			} s;
			Uint64 u;
		} v;
		v.u = x;
		__asm__("bswapl %0 ; bswapl %1 ; xchgl %0,%1": "=r"(v.s.a), "=r"(v.s.b):"0"(v.s.a), "1"(v.s.b));
		return v.u;
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

convert c:
	__attribute__((always_inline)) static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		__asm__("bswapq %0": "=r"(x):"0"(x));
		return x;
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

convert c:
	__attribute__((always_inline)) static __inline__ Uint64 SDL_Swap64(Uint64 x) {
		Uint32 hi, lo;
		/* Separate into high and low 32-bit values and swap them */
		lo = ((Uint32)(x & 0xFFFFFFFF));
		x >>= 32;
		hi = ((Uint32)(x & 0xFFFFFFFF));
		x = SDL_Swap32(lo);
		x <<= 32;
		x |= SDL_Swap32(hi);
		return (x);
	}
to fb:
	#define SDL_Swap64(x) _
		culngint((SDL_Swap32(culngint(x) and &hFFFFFFFF) shl 32) or _
		         SDL_Swap32(culngint(x) shr 32))

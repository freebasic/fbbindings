convert c:
	#define SKIP_EOL(p)
		if (*(p) == 0x13) {
			p++;
			if (*(p) == 0x10)
				p++;
		}
		if (*(p) == 0x10) {
			p++;
			if (*(p) == 0x13)
				p++;
		}
to c:
	#define SKIP_EOL(p) {
		if (*(p) == 0x13) {
			p += 1;
			if (*(p) == 0x10)
				p += 1;
		}
		if (*(p) == 0x10) {
			p += 1;
			if (*(p) == 0x13)
				p += 1;
		}
	}

convert c:
	#define MOVETO_ENDTAG(p)
		while ((*p) && (*(p) != '>'))
			(p)++
to c:
	#define MOVETO_ENDTAG(p)
		while ((*p) && (*(p) != '>'))
			(p) += 1;

convert c:
	#define MOVETO_STARTTAG(p)
		while ((*p) && (*(p) != '<'))
			(p)++
to c:
	#define MOVETO_STARTTAG(p)
		while ((*p) && (*(p) != '<'))
			(p) += 1;

convert c: #define LIBXML_TEST_VERSION xmlCheckVersion(20902);
to c:      #define LIBXML_TEST_VERSION xmlCheckVersion(20902)

convert c:
	#define xmlXPathEmptyNodeSet(ns) {
		while ((ns)->nodeNr > 0)
			(ns)->nodeTab[(ns)->nodeNr--] = NULL;
	}
to c:
	#define xmlXPathEmptyNodeSet(ns) {
		while ((ns)->nodeNr > 0) {
			(ns)->nodeTab[(ns)->nodeNr] = NULL;
			(ns)->nodeNr -= 1;
		}
	}

convert c: #define CHECK_ERROR if (ctxt->error != XPATH_EXPRESSION_OK) return
to c:      #define CHECK_ERROR if (ctxt->error != XPATH_EXPRESSION_OK) return;

convert c: #define CHECK_ERROR0 if (ctxt->error != XPATH_EXPRESSION_OK) return(0)
to c:      #define CHECK_ERROR0 if (ctxt->error != XPATH_EXPRESSION_OK) return(0);

convert c: #define CHECK_TYPE(typeval) if ((ctxt->value == NULL) || (ctxt->value->type != typeval)) XP_ERROR(XPATH_INVALID_TYPE)
to c:      #define CHECK_TYPE(typeval) if ((ctxt->value == NULL) || (ctxt->value->type != typeval)) XP_ERROR(XPATH_INVALID_TYPE);

convert c: #define CHECK_TYPE0(typeval) if ((ctxt->value == NULL) || (ctxt->value->type != typeval)) XP_ERROR0(XPATH_INVALID_TYPE)
to c:      #define CHECK_TYPE0(typeval) if ((ctxt->value == NULL) || (ctxt->value->type != typeval)) XP_ERROR0(XPATH_INVALID_TYPE);

convert c: #define CHECK_ARITY(x)   if (ctxt == NULL) return; if (nargs != (x)) XP_ERROR(XPATH_INVALID_ARITY); if (ctxt->valueNr < ctxt->valueFrame + (x)) XP_ERROR(XPATH_STACK_ERROR);
to c:      #define CHECK_ARITY(x) { if (ctxt == NULL) return; if (nargs != (x)) XP_ERROR(XPATH_INVALID_ARITY); if (ctxt->valueNr < ctxt->valueFrame + (x)) XP_ERROR(XPATH_STACK_ERROR); }

convert c: #define XSLT_REGISTER_FUNCTION_LOOKUP(ctxt) xmlXPathRegisterFuncLookup((ctxt)->xpathCtxt, (xmlXPathFuncLookupFunc)  xsltXPathFunctionLookup, (void *)(ctxt->xpathCtxt));
to c:      #define XSLT_REGISTER_FUNCTION_LOOKUP(ctxt) xmlXPathRegisterFuncLookup((ctxt)->xpathCtxt, (xmlXPathFuncLookupFunc) &xsltXPathFunctionLookup, (void *)(ctxt->xpathCtxt))

convert c:
	#define XSLT_REGISTER_VARIABLE_LOOKUP(ctxt)
		xmlXPathRegisterVariableLookup((ctxt)->xpathCtxt, xsltXPathVariableLookup, (void *)(ctxt));
		xsltRegisterAllFunctions((ctxt)->xpathCtxt);
		xsltRegisterAllElement(ctxt);
		(ctxt)->xpathCtxt->extra = ctxt
to c:
	#define XSLT_REGISTER_VARIABLE_LOOKUP(ctxt) {
		xmlXPathRegisterVariableLookup((ctxt)->xpathCtxt, &xsltXPathVariableLookup, (void *)(ctxt));
		xsltRegisterAllFunctions((ctxt)->xpathCtxt);
		xsltRegisterAllElement(ctxt);
		(ctxt)->xpathCtxt->extra = ctxt;
	}

convert c:
	#define XSLT_GET_IMPORT_PTR(res, style, name) {
		xsltStylesheetPtr st = style;
		res = NULL;
		while (st != NULL) {
			if (st->name != NULL) {
				res = st->name;
				break;
			}
			st = xsltNextImport(st);
		}
	}
to fb:
	#macro XSLT_GET_IMPORT_PTR(res, style, name)
		scope
			dim st as xsltStylesheetPtr = style
			res = NULL
			while st <> NULL
				if st->name <> NULL then
					res = st->name
					exit while
				end if
				st = xsltNextImport(st)
			wend
		end scope
	#endmacro

convert c:
	#define XSLT_GET_IMPORT_INT(res, style, name) {
		xsltStylesheetPtr st = style;
		res = -1;
		while (st != NULL) {
			if (st->name != -1) {
				res = st->name;
				break;
			}
			st = xsltNextImport(st);
		}
	}
to fb:
	#macro XSLT_GET_IMPORT_INT(res, style, name)
		scope
			dim st as xsltStylesheetPtr = style
			res = -1
			while st <> NULL
				if st->name <> (-1) then
					res = st->name
					exit while
				end if
				st = xsltNextImport(st)
			wend
		end scope
	#endmacro

convert c:
	#define XSLT_MARK_RES_TREE_FRAG(n)
		(n)->name = (char *) xmlStrdup(BAD_CAST " fake node libxslt");
to c:
	#define XSLT_MARK_RES_TREE_FRAG(n)
		(n)->name = (char *) xmlStrdup(" fake node libxslt")

convert c:
	#define CHECK_STOPPEDE
		if (ctxt->state == XSLT_STATE_STOPPED)
			goto error;
to fb:
	#macro CHECK_STOPPEDE
		if ctxt->state = XSLT_STATE_STOPPED then
			goto error
		end if
	#endmacro

convert c: #define XSLT_TODO xsltGenericError(xsltGenericErrorContext, "Unimplemented block at %s:%d\n", __FILE__, __LINE__);
to c:      #define XSLT_TODO xsltGenericError(xsltGenericErrorContext, "Unimplemented block at %s:%d\n", __FILE__, __LINE__)

convert c: #define XSLT_STRANGE xsltGenericError(xsltGenericErrorContext, "Internal error at %s:%d\n", __FILE__, __LINE__);
to c:      #define XSLT_STRANGE xsltGenericError(xsltGenericErrorContext, "Internal error at %s:%d\n", __FILE__, __LINE__)

convert c: #define XSLT_TRACE(ctxt, code, call) if (ctxt->traceCode && (*(ctxt->traceCode) & code)) call
to c:      #define XSLT_TRACE(ctxt, code, call) if (ctxt->traceCode && (*(ctxt->traceCode) & code)) call;
